// Generated by CoffeeScript 1.6.3
(function() {
  var __slice = [].slice;

  $(function() {
    var ChessUI;
    return Chess.ChessUI = ChessUI = (function() {
      var selected;

      function ChessUI(game) {
        var that;
        this.game = game;
        that = this;
        $('div').on('click', 'div', function(event) {
          return that.clickSquare(event, this);
        });
        this.drawTable();
        this.drawPieces(this.game.board);
        if (this.game.current_player.type === "computer") {
          this.clickSquare();
        }
      }

      ChessUI.prototype.cssSelector = function(array) {
        return "#\\3" + array[0].toString() + "\\," + array[1].toString();
      };

      ChessUI.prototype.toggleColor = function(color) {
        if (color === "black") {
          return "white";
        } else {
          return "black";
        }
      };

      ChessUI.prototype.drawTable = function() {
        var chessSquares, color, table, x, y, _i, _j;
        table = $('.chessboard');
        chessSquares = "";
        for (y = _i = 1; _i <= 8; y = ++_i) {
          color = this.toggleColor(color);
          for (x = _j = 1; _j <= 8; x = ++_j) {
            color = this.toggleColor(color);
            chessSquares += "<div class='square " + color + "' id='" + String(x) + "," + String(y) + "'></div>";
          }
          chessSquares += "<br>";
        }
        table.append(chessSquares);
        return ChessUI.squares = $('.square');
      };

      ChessUI.prototype.drawPieces = function(board, $board) {
        var piece, pieceDiv, _i, _len, _ref, _results;
        _ref = __slice.call(board.pieces().white).concat(__slice.call(board.pieces().black));
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          piece = _ref[_i];
          pieceDiv = "<img class='piece' src='/assets/chesspieces/" + piece.string + ".png'>";
          _results.push($('#' + piece.cssSelector()).append(pieceDiv));
        }
        return _results;
      };

      selected = null;

      ChessUI.prototype.clickSquare = function(event, coord) {
        var move, movePossible, piece, square, _i, _j, _len, _len1, _ref, _ref1;
        movePossible = $(coord).hasClass('highlighted-move');
        _ref = ChessUI.squares;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          square = _ref[_i];
          $(square).removeClass("highlighted-piece");
          $(square).removeClass("highlighted-move");
        }
        if (coord) {
          piece = this.game.board.pos([coord.id[0], coord.id[2]]);
        }
        piece || (piece = {});
        if (!selected && piece.color === this.game.current_player.color) {
          if (piece) {
            _ref1 = this.game.ruleBook.availableMoves(piece);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              move = _ref1[_j];
              $(this.cssSelector(move)).addClass('highlighted-move');
            }
            $(coord).addClass("highlighted-piece");
            selected = $(coord)[0];
          }
        } else if (selected !== coord && movePossible) {
          this.forceMovePiece(selected, coord);
          this.game.playTurn([[selected.id[0], selected.id[2]], [coord.id[0], coord.id[2]]]);
          selected = null;
        } else {
          selected = null;
        }
        if (this.game.current_player.type === 'computer' && !this.game.ruleBook.playerWon()) {
          move = this.game.current_player.moveChoice();
          this.forceMovePiece(this.cssSelector(move[0]), this.cssSelector(move[1]));
          this.game.playTurn(move);
          if (!this.game.ruleBook.playerWon()) {
            return this.clickSquare();
          }
        }
      };

      ChessUI.prototype.forceMovePiece = function(startPos, endPos) {
        $(endPos).html("");
        $(endPos).append($(startPos).html());
        return $(startPos).html("");
      };

      return ChessUI;

    })();
  });

}).call(this);
